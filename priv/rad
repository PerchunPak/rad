#!/usr/bin/env sh

set -e

self="rad"
build_dir="./build/dev/javascript/${self}"
main_module="${build_dir}/${self}.mjs"
run="gleam.main"
run_module="${build_dir}/${run}.mjs"

fail() {
  message="${1}"
  printf %b "\033[91m${message}\033[0m\n" >&2
  exit 1
}

config="gleam.toml"
if ! test -f "./${config}"; then
  fail "error: \`${config}\` not found; \`${self}\` must be invoked from a Gleam project's base directory"
fi

# Detect JavaScript runtime
runtime="node"
if grep -q '^\s*runtime\s*=\s*"deno"' "./${config}"; then
  runtime="deno"
fi

snag=""
for dependency in "gleam" "${runtime}"; do
  if ! type "${dependency}" >/dev/null 2>&1; then
    if test -n "${snag}"; then
      snag="${snag}\n"
    fi
    snag="${snag}error: \`${dependency}\` required but not found"
  fi
done
if test -n "${snag}"; then
  fail "${snag}"
fi

# Compile if necessary.
#
# Redirect stdout to stderr, keeping stdout clear for the given task.
#
if ! test -f "${main_module}"; then
  gleam build --target=javascript >&2
fi
if ! test -f "${main_module}"; then
  fail "error: \`${main_module}\` not found; try \`gleam add --dev ${self}\`"
fi
if ! test -f "${run_module}"; then
  cp "./priv/${run}.mjs" "${run_module}"
fi

if test "${runtime}" = "deno"; then
  exec deno run \
    --allow-all \
    --unstable \
    "${run_module}" \
    "${@}"
else
  exec node \
    --experimental-fetch \
    --experimental-repl-await \
    --no-warnings \
    --title="${self}" \
    "${run_module}" \
    "${@}"
fi
